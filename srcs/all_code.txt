===== File: ./events/mouse_hook.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   mouse_hook.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: procha-r <procha-r@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 13:06:03 by procha-r          #+#    #+#             */
/*   Updated: 2025/03/02 18:12:29 by procha-r         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "events.h"
#include "draw.h"

int	mouse_hook(int button, int x, int y, void *param)
{
	t_fdf	*fdf;

	fdf = (t_fdf *)param;
	(void)x;
	(void)y;
	if (button == 4)
		fdf->mlx.zoom += 2.0f;
	else if (button == 5)
		fdf->mlx.zoom -= 2.0f;
	clear_image(&fdf->mlx, 1000, 800, 0x000000);
	draw_wireframe(&fdf->map, & fdf->mlx, fdf->projection);
	render_image(&fdf->mlx);
	return (0);
}



===== File: ./events/exit_hook.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   exit_hook.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 12:41:44 by procha-r          #+#    #+#             */
/*   Updated: 2025/04/13 13:06:45 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "events.h"
#include "utils.h"
#include <stdlib.h>

int	close_window(void *param)
{
	t_fdf	*fdf;

	fdf = (t_fdf *)param;
	free_all(&fdf->map, &fdf->mlx);
	exit(0);
	return (0);
}



===== File: ./events/hooks.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   hooks.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: procha-r <procha-r@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 12:42:58 by procha-r          #+#    #+#             */
/*   Updated: 2025/03/02 13:04:58 by procha-r         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fdf.h"
#include "events.h"

void	setup_hooks(t_fdf *fdf)
{
	mlx_key_hook(fdf->mlx.win_ptr, key_hook, fdf);
	mlx_hook(fdf->mlx.win_ptr, 17, 0, close_window, fdf);
}



===== File: ./events/key_hook.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   key_hook.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: procha-r <procha-r@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 12:44:49 by procha-r          #+#    #+#             */
/*   Updated: 2025/04/13 19:08:39 by procha-r         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fdf.h"
#include "events.h"
#include "utils.h"
#include "draw.h"
#include <stdlib.h>

static void	handle_zoom_keys(t_fdf *fdf, int keycode)
{
	if (keycode == 24)
		fdf->mlx.zoom += 2.0f;
	if (keycode == 27)
		fdf->mlx.zoom -= 2.0f;
}

static void	handle_offset_keys(t_fdf *fdf, int keycode)
{
	if (keycode == 123)
		fdf->mlx.offset_x -= 20.0f;
	if (keycode == 124)
		fdf->mlx.offset_x += 20.0f;
	if (keycode == 125)
		fdf->mlx.offset_y += 20.0f;
	if (keycode == 126)
		fdf->mlx.offset_y -= 20.0f;
}

static void	handle_projection_keys(t_fdf *fdf, int keycode)
{
	if (keycode == 35)
		fdf->projection = PROJ_PARALLEL;
	if (keycode == 34)
		fdf->projection = PROJ_ISOMETRIC;
}

static void	redraw_scene(t_fdf *fdf)
{
	clear_image(&fdf->mlx, 1000, 800, 0x000000);
	draw_wireframe(&fdf->map, &fdf->mlx, fdf->projection);
	render_image(&fdf->mlx);
}

int	key_hook(int keycode, void *param)
{
	t_fdf	*fdf;

	fdf = (t_fdf *)param;
	if (keycode == 53)
	{
		free_all(&fdf->map, &fdf->mlx);
		exit(0);
	}
	handle_zoom_keys(fdf, keycode);
	handle_offset_keys(fdf, keycode);
	handle_projection_keys(fdf, keycode);
	redraw_scene(fdf);
	return (0);
}



===== File: ./init_window.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_window.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: procha-r <procha-r@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 18:35:26 by procha-r          #+#    #+#             */
/*   Updated: 2025/04/30 23:53:15 by procha-r         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "utils.h"
#include "draw.h"
#include "events.h"

void	init_window(t_mlx *mlx_data, int width, int height, const char *title)
{
	mlx_data->mlx_ptr = mlx_init();
	if (!mlx_data->mlx_ptr)
		error_exit("Failed to initialize MLX\n");
	mlx_data->win_ptr = mlx_new_window(mlx_data->mlx_ptr, width, \
		height, (char *)title);
	if (!mlx_data->win_ptr)
	{
		free_all(NULL, mlx_data);
		error_exit("Failed to create window.\n");
	}
	mlx_data->zoom = 20.0;
	mlx_data->offset_x = width / 2;
	mlx_data->offset_y = height / 2;
	mlx_data->angle_x = 0.0;
	mlx_data->angle_y = 0.0;
	mlx_data->win_width = width;
	mlx_data->win_height = height;
	create_image(mlx_data, width, height);
}



===== File: ./utils/error.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   error.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: procha-r <procha-r@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 18:12:44 by procha-r          #+#    #+#             */
/*   Updated: 2025/03/02 18:12:48 by procha-r         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "utils.h"
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

// Function to print an error message and exit the program
void	error_exit(const char *message)
{
	if (message)
		write(2, message, strlen(message));
	exit(EXIT_FAILURE);
}



===== File: ./utils/free_resources.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   free_resources.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pedroribeiro <pedroribeiro@student.42.f    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 18:32:06 by procha-r          #+#    #+#             */
/*   Updated: 2025/04/13 13:11:53 by pedroribeir      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdlib.h>
#include "utils.h"

void	free_map(t_map *map)
{
	int	i;

	if (!map->matrix)
		return ;
	i = 0;
	while (i < map->height)
	{
		free(map->matrix[i]);
		i++;
	}
	free(map->matrix);
	map->matrix = NULL;
}

void	free_all(t_map *map, t_mlx *mlx_data)
{
	if (map)
		free_map(map);
	if (mlx_data)
	{
		if (mlx_data->img_ptr)
			mlx_destroy_image(mlx_data->mlx_ptr, mlx_data->img_ptr);
		if (mlx_data->win_ptr)
			mlx_destroy_window(mlx_data->mlx_ptr, mlx_data->win_ptr);
	}
}



===== File: ./utils/checks.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   checks.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: procha-r <procha-r@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 18:28:31 by procha-r          #+#    #+#             */
/*   Updated: 2025/03/02 20:57:04 by procha-r         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "utils.h"
#include <unistd.h>

int	check_args(int argc, char **argv)
{
	(void)argv;
	if (argc != 2)
	{
		write(1, "Usage: <filename> <mapfile.fdf>\n", 32);
		return (0);
	}
	return (1);
}

int	is_numeric(const char *str)
{
	int	i;

	i = 0;
	if (!str || !*str)
		return (0);
	if (str[i] == '-' || str[i] == '+')
		i++;
	while (str[i])
	{
		if (str[i] < '0' || str[i] > '9')
			return (0);
		i++;
	}
	return (1);
}



===== File: ./bonus/color_bonus.c =====



===== File: ./bonus/transform_bonus.c =====



===== File: ./draw/image_utils.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   image_utils.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: procha-r <procha-r@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 09:48:17 by procha-r          #+#    #+#             */
/*   Updated: 2025/03/02 18:13:20 by procha-r         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "draw.h"
#include "utils.h"

void	create_image(t_mlx *mlx, int width, int height)
{
	mlx->img_ptr = mlx_new_image(mlx->mlx_ptr, width, height);
	if (!mlx->img_ptr)
		error_exit("Failed to create image.\n");
	mlx->addr = mlx_get_data_addr(mlx->img_ptr, &mlx->bpp, \
		&mlx->line_len, &mlx->endian);
}

void	clear_image(t_mlx *mlx, int width, int height, int color)
{
	int	x;
	int	y;

	y = 0;
	while (y < height)
	{
		x = 0;
		while (x < width)
		{
			put_pixel(mlx, x, y, color);
			x++;
		}
		y++;
	}
}

void	render_image(t_mlx *mlx)
{
	mlx_put_image_to_window(mlx->mlx_ptr, mlx->win_ptr, mlx->img_ptr, 0, 0);
}



===== File: ./draw/draw_pixel.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   draw_pixel.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: procha-r <procha-r@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 09:03:24 by procha-r          #+#    #+#             */
/*   Updated: 2025/04/30 23:53:59 by procha-r         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "draw.h"

void	put_pixel(t_mlx *mlx, int x, int y, int color)
{
	char	*dst;

	if (x < 0 || x >= mlx->win_width || y < 0 || y >= mlx->win_height)
		return ;
	dst = mlx->addr + (y * mlx->line_len + x * (mlx->bpp / 8));
	*(unsigned int *)dst = color;
}



===== File: ./draw/draw_line.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   draw_line.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: procha-r <procha-r@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 08:58:49 by procha-r          #+#    #+#             */
/*   Updated: 2025/04/29 09:53:16 by procha-r         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "draw.h"
#include <stdlib.h>

static void	init_bresenham(t_bresenham *b, t_point2 start, \
	t_point2 end, int color)
{
	b->x0 = (int)start.x;
	b->y0 = (int)start.y;
	b->x1 = (int)end.x;
	b->y1 = (int)end.y;
	b->dx = abs(b->x1 - b->x0);
	b->dy = -abs(b->y1 - b->y0);
	if (b->x0 < b->x1)
		b->sx = 1;
	else
		b->sx = -1;
	if (b->y0 < b->y1)
		b->sy = 1;
	else
		b->sy = -1;
	b->err = b->dx + b->dy;
	b->color = color;
}

static void	step_bresenham(t_bresenham *b)
{
	b->e2 = 2 * b->err;
	if (b->e2 >= b->dy)
	{
		b->err += b->dy;
		b->x0 += b->sx;
	}
	if (b->e2 <= b->dx)
	{
		b->err += b->dx;
		b->y0 += b->sy;
	}
}

void	draw_line(t_mlx *mlx, t_point2 start, t_point2 end, int color)
{
	t_bresenham	b;

	init_bresenham(&b, start, end, color);
	while (1)
	{
		put_pixel(mlx, b.x0, b.y0, b.color);
		if (b.x0 == b.x1 && b.y0 == b.y1)
			break ;
		step_bresenham(&b);
	}
}



===== File: ./draw/draw_wireframe.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   draw_wireframe.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: procha-r <procha-r@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 09:21:09 by procha-r          #+#    #+#             */
/*   Updated: 2025/05/01 01:32:18 by procha-r         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "draw.h"
#include "fdf.h"
#include <math.h>

static int	get_altitude_color(int z, int z_min, int z_max)
{
	float	ratio;
	int		red;
	int		green;
	int		blue;

	if (z_min == z_max)
		return (0xFFFFFF);
	ratio = (float)(z - z_min) / (float)(z_max - z_min);
	if (ratio < 0.0f)
		ratio = 0.0f;
	if (ratio > 1.0f)
		ratio = 1.0f;
	red = (int)(255 * ratio);
	green = 0;
	blue = (int)(255 * (1.0f - ratio));
	return ((red << 16) | (green << 8) | blue);
}

static t_point2	project_point(t_point3 pt, const t_mlx *mlx_data, int proj)
{
	t_point2	p;
	float		angle;
	float		iso_x;
	float		iso_y;

	if (proj == PROJ_ISOMETRIC)
	{
		angle = 0.523599f;
		iso_x = (pt.x - pt.y) * cosf(angle);
		iso_y = -pt.z + (pt.x + pt.y) * sinf(angle);
		p.x = iso_x * mlx_data->zoom + mlx_data->offset_x;
		p.y = iso_y * mlx_data->zoom + mlx_data->offset_y;
	}
	else
	{
		p.x = pt.x * mlx_data->zoom + mlx_data->offset_x;
		p.y = pt.y * mlx_data->zoom + mlx_data->offset_y - (pt.z * 0.05f);
	}
	return (p);
}

static void	draw_right(t_wire_args *args)
{
	t_point3	pt1;
	t_point3	pt2;

	pt1.x = args->x;
	pt1.y = args->y;
	pt1.z = args->map->matrix[args->y][args->x];
	pt2.x = args->x + 1;
	pt2.y = args->y;
	pt2.z = args->map->matrix[args->y][args->x + 1];
	draw_line(args->mlx, project_point(pt1, args->mlx, args->proj), \
		project_point(pt2, args->mlx, args->proj), args->color);
}

static void	draw_bottom(t_wire_args *args)
{
	t_point3	pt1;
	t_point3	pt2;

	pt1.x = args->x;
	pt1.y = args->y;
	pt1.z = args->map->matrix[args->y][args->x];
	pt2.x = args->x;
	pt2.y = args->y + 1;
	pt2.z = args->map->matrix[args->y + 1][args->x];
	draw_line(args->mlx, project_point(pt1, args->mlx, args->proj), \
		project_point(pt2, args->mlx, args->proj), args->color);
}

void	draw_wireframe(const t_map *map, t_mlx *mlx_data, int projection)
{
	t_wire_args	args;

	args.map = map;
	args.mlx = mlx_data;
	args.proj = projection;
	args.y = 0;
	while (args.y < map->height)
	{
		args.x = 0;
		while (args.x < map->width)
		{
			args.color = get_altitude_color(map->matrix[args.y][args.x], \
				map->z_min, map->z_max);
			if (args.x < map->width - 1)
				draw_right(&args);
			if (args.y < map->height - 1)
				draw_bottom(&args);
			args.x++;
		}
		args.y++;
	}
}



===== File: ./map/init_map_struct.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_map_struct.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: procha-r <procha-r@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/29 17:29:57 by procha-r          #+#    #+#             */
/*   Updated: 2025/04/30 23:41:02 by procha-r         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "map.h"
#include "utils.h"
#include "libft.h"
#include <stdlib.h>

static void	rollback_partial_alloc(int **matrix, int rows)
{
	int	i;

	i = 0;
	while (i < rows)
	{
		free(matrix[i]);
		i++;
	}
	free(matrix);
}

static int	allocate_matrix_rows(int **matrix, int height, int width)
{
	int	i;

	i = 0;
	while (i < height)
	{
		matrix[i] = ft_calloc(width, sizeof(int));
		if (!matrix[i])
		{
			rollback_partial_alloc(matrix, i);
			return (1);
		}
		i++;
	}
	return (0);
}

int	init_map_struct(t_map *map, int height, int width)
{
	map->height = height;
	map->width = width;
	map->matrix = malloc(sizeof(int *) * height);
	if (!map->matrix)
		return (1);
	if (allocate_matrix_rows(map->matrix, height, width))
		return (1);
	map->z_min = 0;
	map->z_max = 0;
	return (0);
}



===== File: ./map/parse_point.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parse_point.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: procha-r <procha-r@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/29 16:16:59 by procha-r          #+#    #+#             */
/*   Updated: 2025/05/01 01:44:49 by procha-r         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "map.h"
#include "utils.h"
#include <stdlib.h>
#include <limits.h>

int	fill_matrix_row(t_map *map, char *line, int row_idx)
{
	char	**cols;
	int		ret;

	ret = 0;
	cols = ft_split(line, ' ');
	if (!cols)
		return (1);
	if (process_row_points(map, cols, row_idx))
		ret = 1;
	free_split(cols);
	return (ret);
}



===== File: ./map/validate_map.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   validate_map.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: procha-r <procha-r@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 18:16:28 by procha-r          #+#    #+#             */
/*   Updated: 2025/05/01 01:22:48 by procha-r         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "map.h"

int	validate_line(const char *line)
{
	if (!line || !*line)
		return (0);
	while (*line)
	{
		if ((*line >= '0' && *line <= '9') || *line == ' ' || *line == '-' \
			|| *line == '+' || *line == ',' || (*line >= 'A' && *line <= 'F') \
			|| (*line >= 'a' && *line <= 'f') || *line == 'x' || *line == 'X')
		{
			line++;
			continue ;
		}
		return (0);
	}
	return (1);
}

int	count_columns(const char *line)
{
	int	count;
	int	in_word;
	int	i;

	count = 0;
	in_word = 0;
	i = 0;
	while (line[i])
	{
		if (line[i] != ' ' && !in_word)
		{
			in_word = 1;
			count++;
		}
		else if (line[i] == ' ')
			in_word = 0;
		i++;
	}
	return (count);
}



===== File: ./map/map_utils.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   map_utils.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: procha-r <procha-r@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 18:42:48 by procha-r          #+#    #+#             */
/*   Updated: 2025/03/02 18:48:11 by procha-r         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "map.h"
#include "utils.h"
#include <stdlib.h>

void	update_min_max_z(t_map *map, int z_value)
{
	if (z_value < map->z_min)
		map->z_min = z_value;
	if (z_value > map->z_max)
		map->z_max = z_value;
}

int	get_z_min(const t_map *map)
{
	return (map->z_min);
}

int	get_zmax(const t_map *map)
{
	return (map->z_max);
}



===== File: ./map/parse_map.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parse_map.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: procha-r <procha-r@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 18:02:43 by procha-r          #+#    #+#             */
/*   Updated: 2025/05/01 02:01:34 by procha-r         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "map.h"
#include "utils.h"
#include "get_next_line.h"
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <stdio.h>

static void	strip_newline(char *line)
{
	int	len;

	if (!line)
		return ;
	len = strlen(line);
	if (len > 0 && line[len - 1] == '\n')
		line[len - 1] = '\0';
}

static int	open_map_file(const char *filename)
{
	int	fd;

	fd = open(filename, O_RDONLY);
	if (fd < 0)
		error_exit("Error: cannot open map file.\n");
	return (fd);
}

static int	read_map_lines(int fd, char **lines,
	int *line_count, int *col_count)
{
	char	*line;
	int		cols;

	*line_count = 0;
	*col_count = 0;
	line = get_next_line(fd);
	while (line)
	{
		strip_newline(line);
		if (!validate_line(line))
		{
			write(2, "💥 Invalid line rejected:\n", 26);
			write(2, line, strlen(line));
			write(2, "\n", 1);
			free(line);
			return (1);
		}
		lines[*line_count] = line;
		cols = count_columns(line);
		if (cols > *col_count)
			*col_count = cols;
		(*line_count)++;
		if (*line_count >= 10000)
			error_exit("Error: too many lines.\n");
		line = get_next_line(fd);
	}
	return (0);
}

static void	parse_lines_into_matrix(t_map *map, char **lines, int line_count)
{
	int	i;

	i = 0;
	while (i < line_count)
	{
		if (fill_matrix_row(map, lines[i], i))
			error_exit("Error: fill_matrix_row fail\n");
		free(lines[i]);
		i++;
	}
	free(lines);
}

int	parse_map(const char *filename, t_map *map)
{
	int		fd;
	int		line_count;
	int		col_count;
	char	**lines;

	lines = malloc(sizeof(char *) * 10000);
	if (!lines)
		error_exit("Error: lines malloc fail.\n");
	fd = open_map_file(filename);
	if (read_map_lines(fd, lines, &line_count, &col_count))
	{
		close(fd);
		error_exit("Error: Invalid line in map.\n");
	}
	close(fd);
	if (init_map_struct(map, line_count, col_count))
		error_exit("Error: init_map_struct failed.\n");
	parse_lines_into_matrix(map, lines, line_count);
	return (0);
}



===== File: ./map/init_map.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_map.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: procha-r <procha-r@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/29 16:16:59 by procha-r          #+#    #+#             */
/*   Updated: 2025/05/01 01:50:16 by procha-r         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "map.h"
#include "utils.h"
#include <stdlib.h>
#include <limits.h>

int	fill_matrix_row(t_map *map, char *line, int row_idx)
{
	char	**cols;
	int		ret;

	ret = 0;
	cols = ft_split(line, ' ');
	if (!cols)
		return (1);
	if (process_row_points(map, cols, row_idx))
		ret = 1;
	ft_free_split(cols);
	return (ret);
}



===== File: ./map/parse_point_utils.c =====
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parse_point_utils.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: procha-r <procha-r@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/01 01:40:34 by procha-r          #+#    #+#             */
/*   Updated: 2025/05/01 01:55:14 by procha-r         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "map.h"
#include "fdf.h"
#include "libft.h"

int	atoi_base_hex(const char *s, int default_color)
{
	long	result;
	int		i;

	result = 0;
	i = 0;
	if (!s)
		return (default_color);
	if (s[0] == '0' && (s[1] == 'x' || s[1] == 'X'))
		i += 2;
	while (s[i])
	{
		result <<= 4;
		if (s[i] >= '0' && s[i] <= '9')
			result += s[i] - '0';
		else if (s[i] >= 'A' && s[i] <= 'F')
			result += s[i] - 'A' + 10;
		else if (s[i] >= 'a' && s[i] <= 'f')
			result += s[i] - 'a' + 10;
		else
			return (default_color);
		i++;
	}
	return ((int)result);
}

void	split_point_token(const char *token,
	char **h_str, char **c_str, char **comma)
{
	*comma = ft_strchr(token, ',');
	if (*comma)
	{
		**comma = '\0';
		*h_str = (char *)token;
		*c_str = *comma + 1;
	}
	else
	{
		*h_str = (char *)token;
		*c_str = NULL;
	}
}

int	parse_point(const char *token, int *z,
	int *color, int default_color)
{
	char	*comma;
	char	*h_str;
	char	*c_str;
	long	vz;

	if (!token || !*token)
		return (1);
	split_point_token(token, &h_str, &c_str, &comma);
	vz = ft_atol(h_str);
	if (vz < -2147483648 || vz > 2147483647)
		return (1);
	*z = (int)vz;
	if (comma)
		*color = atoi_base_hex(c_str, default_color);
	else
		*color = default_color;
	if (comma)
		*comma = ',';
	return (0);
}

int	process_point(t_map *map, char *token,
	int x, int row_idx)
{
	int		z;
	int		color;
	int		default_color;

	default_color = 0xFFFFFF;
	if (parse_point(token, &z, &color, default_color))
		return (1);
	map->matrix[row_idx][x] = z;
	update_min_max_z(map, z);
	return (0);
}

int	process_row_points(t_map *map,
	char **cols, int row_idx)
{
	int	x;

	x = 0;
	while (cols[x] && x < map->width)
	{
		if (process_point(map, cols[x], x, row_idx))
			return (1);
		x++;
	}
	return (0);
}



